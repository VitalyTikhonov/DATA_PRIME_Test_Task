@import "../../css-variables.scss";

@keyframes blobIn {
  to {
    margin-left: $taskCheckboxLeftMargin;
  }
}

@keyframes showSlashes {
  50% {
    transform: scale(1.2);
  }
  100% {
    transform: scale(1);
  }
}

@keyframes dimTask {
  to {
    background-position: 0% 100%;
  }
}

@keyframes textclip {
  to {
    background-position: 0% center;
  }
}

.task {
  width: 1052px;
  min-height: 103px;
  margin-bottom: 15px;
  display: flex;
  align-items: center;
  padding: 17px $taskCheckboxLeftMargin 17px 0;
  border-radius: 30px;
  background: white;
  box-shadow: 5px 50px 100px rgba(0, 0, 0, 0.1);

  &_type_template {
    background: #c7c9d3;
    box-shadow: none;
    padding: 0;
  }

  &:last-child {
    margin-bottom: 0;
  }

  &_commented {
    background: linear-gradient(180deg, #ffffff 64%, #f8f3e9 91%);
    background-size: auto 200%;
    background-position: 0% 0%;

    animation: dimTask 0.5s linear;
    animation-fill-mode: forwards;
  }
}

.task__add-task-button {
  @extend %taskTextElement;
  width: 100%;
  height: 100%;
  border-radius: inherit;
  display: flex;
  align-items: center;
  color: #56595e;
  padding-left: $taskCheckboxLeftMargin;
}

.task__form {
  width: 100%;
  display: flex;
  align-items: center;
  overflow: hidden;
}

/* Далее применил и адаптировал одну увиденную мной схему для стилизации нативного чекбока.
Оставляю правила для незаявленных в скринкасте состояний на всякий случай. */
.task__checkbox {
  display: flex;
  align-items: center;
  position: relative;
  margin-right: 23px;
  /* for animation */
  margin-left: calc(-#{$taskCheckboxLeftMargin} - #{$animatedObjectWidth});
  animation-name: blobIn;
  animation-duration: 1s;
  animation-timing-function: ease;
  animation-fill-mode: forwards;

  /* Для проверки анимации в режиме разработки */
  // animation-play-state: paused;
  // .task:hover & {
  //   animation-play-state: running;
  // }

  &-pseudo {
    width: $animatedObjectWidth;
    height: 43px;
    border-radius: 12px;
    cursor: pointer;
    background-color: #eae9ea;
  }

  &-proper {
    position: absolute;
    width: 1px;
    height: 1px;
    margin: -1px;
    border: 0;
    padding: 0;
    clip: rect(0 0 0 0);
    overflow: hidden;

    /*checked*/
    // &:checked + .task__checkbox-pseudo {
    //   background-color: #72b62b;
    //   background-image: ...;
    //   background-size: contain;
    //   background-repeat: no-repeat;
    //   background-position: center;
    // }

    /*focus*/
    // &:focus + .task__checkbox-pseudo {
    //   box-shadow: 0 0 0 3px rgba(254, 39, 39, 0.3);
    // }

    /*disabled*/
    // &:disabled + .task__checkbox-pseudo {
    //   border: 1px solid #bbc1e1;
    //   cursor: not-allowed;
    // }

    /*disabled and checked*/
    // &:checked:disabled + .task__checkbox-pseudo {
    //   background-color: #e1e6f9;
    // }
  }
}

.task__field {
  display: flex;
  align-items: center;
  flex-grow: 1;
  max-width: 622px;
  overflow: hidden;
}

.task__field-width-assembly {
  position: relative;
  display: flex;
  align-items: center;
  @extend %taskFieldTypographics;

  &_type_comment {
    flex-grow: 1;
  }
}

.task__field-width-machine {
  color: transparent;

  &_type_comment {
    width: auto;
  }
}

.task__field-proper {
  @extend %taskTextElement;
  @extend %taskFieldTypographics;

  &_type_task {
    position: absolute;
    width: 100%;
    left: 0;
  }

  &_type_name {
    color: #000000;

    &::placeholder {
      color: #9f9e9f;
    }
  }

  &_animate-placeholder {
    background: linear-gradient(to right, #c5bba6 0%, transparent 60%);
    background-size: auto auto;
    background-clip: border-box;
    background-position: 100% center;
    background-size: 250% auto;
    // color: #fff;
    background-clip: text;
    -webkit-background-clip: text;

    animation: textclip 1.2s linear;
    animation-fill-mode: forwards;
  }

  &_type_comment {
    color: #744b11;

    &::placeholder {
      text-fill-color: transparent;
      -webkit-text-fill-color: transparent;
    }

    /* ДЛЯ РЕШЕНИЯ С TEXTAREA */
    // display: block;
    // width: 100%;
    // overflow: hidden;
    // resize: both;
    // min-height: 40px;
    // line-height: 20px;
  }

  &_type_list-name {
    margin: 0 20px;
    width: 85px;

    &::placeholder {
      color: #7a7c80;
    }
  }
}

.task__field-slash-separator {
  @extend %taskFieldTypographics;
  animation: showSlashes 0.7s linear;
  color: #744b11;
}

.task__calendar-widget-opener {
  @extend %taskBarBreadcrumb;
  width: $taskBarBreadcrumbSize;
  border: none;
  outline: none;
  cursor: pointer;
}

.task__dropdown {
  @extend %taskBarBreadcrumb;
  display: flex;
  flex-direction: row;
  align-items: center;
  padding: 20px;
}

.task__list-color {
  width: 21px;
  height: 21px;
  border-radius: 10px;
  border: 4px solid #c7c8c9;
}
